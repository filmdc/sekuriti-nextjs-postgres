'use client';

import { useState, useEffect, useMemo } from 'react';
import { Search, Filter, X, Tag as TagIcon, Clock, TrendingUp, Sparkles } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import {
  Popover,
  PopoverContent,
  PopoverTrigger
} from '@/components/ui/popover';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList
} from '@/components/ui/command';
import { cn } from '@/lib/utils';
import type { Tag } from '@/lib/db/schema-tags';

interface SmartTagSearchProps {
  onTagSelect: (tag: Tag) => void;
  onAssetFilter: (query: string, tags: Tag[]) => void;
  placeholder?: string;
  className?: string;
}

interface SearchHistory {
  query: string;
  tags: Tag[];
  timestamp: number;
}

export function SmartTagSearch({
  onTagSelect,
  onAssetFilter,
  placeholder = 'Search assets by tags, names, or properties...',
  className
}: SmartTagSearchProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedTags, setSelectedTags] = useState<Tag[]>([]);
  const [tags, setTags] = useState<Tag[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [recentSearches, setRecentSearches] = useState<SearchHistory[]>([]);
  const [popularTags, setPopularTags] = useState<Tag[]>([]);

  // Load search history from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('tagSearchHistory');\n    if (saved) {\n      try {\n        setRecentSearches(JSON.parse(saved));\n      } catch (error) {\n        console.error('Error loading search history:', error);\n      }\n    }\n  }, []);\n\n  // Save search history to localStorage\n  const saveSearchHistory = (query: string, tags: Tag[]) => {\n    const newSearch: SearchHistory = {\n      query,\n      tags,\n      timestamp: Date.now()\n    };\n\n    const updated = [newSearch, ...recentSearches.slice(0, 9)];\n    setRecentSearches(updated);\n    localStorage.setItem('tagSearchHistory', JSON.stringify(updated));\n  };\n\n  // Fetch popular tags on mount\n  useEffect(() => {\n    const fetchPopularTags = async () => {\n      try {\n        const response = await fetch('/api/tags?popular=true&limit=8');\n        if (response.ok) {\n          const data = await response.json();\n          setPopularTags(data);\n        }\n      } catch (error) {\n        console.error('Error fetching popular tags:', error);\n      }\n    };\n\n    fetchPopularTags();\n  }, []);\n\n  // Search tags with debouncing\n  useEffect(() => {\n    const searchTags = async () => {\n      if (!searchQuery.trim()) {\n        setTags([]);\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        const response = await fetch(`/api/tags?q=${encodeURIComponent(searchQuery)}`);\n        if (response.ok) {\n          const data = await response.json();\n          setTags(data);\n        }\n      } catch (error) {\n        console.error('Error searching tags:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const debounceTimer = setTimeout(searchTags, 300);\n    return () => clearTimeout(debounceTimer);\n  }, [searchQuery]);\n\n  // Smart search suggestions based on query\n  const smartSuggestions = useMemo(() => {\n    if (!searchQuery.trim()) return [];\n\n    const query = searchQuery.toLowerCase();\n    const suggestions: { type: string; items: Tag[] } = { type: '', items: [] };\n\n    // Asset type suggestions\n    if (['server', 'hardware', 'computer'].some(term => query.includes(term))) {\n      suggestions.type = 'Hardware Assets';\n      suggestions.items = tags.filter(tag => \n        tag.category === 'location' || \n        tag.name.toLowerCase().includes('physical') ||\n        tag.name.toLowerCase().includes('datacenter')\n      );\n    }\n    // Software suggestions\n    else if (['software', 'app', 'application'].some(term => query.includes(term))) {\n      suggestions.type = 'Software Assets';\n      suggestions.items = tags.filter(tag => \n        tag.name.toLowerCase().includes('application') ||\n        tag.name.toLowerCase().includes('software') ||\n        tag.category === 'department'\n      );\n    }\n    // Critical asset suggestions\n    else if (['critical', 'important', 'high'].some(term => query.includes(term))) {\n      suggestions.type = 'Critical Assets';\n      suggestions.items = tags.filter(tag => \n        tag.category === 'criticality' ||\n        tag.name.toLowerCase().includes('critical') ||\n        tag.name.toLowerCase().includes('high')\n      );\n    }\n    // Department suggestions\n    else if (['team', 'department', 'group'].some(term => query.includes(term))) {\n      suggestions.type = 'Department Tags';\n      suggestions.items = tags.filter(tag => tag.category === 'department');\n    }\n\n    return suggestions;\n  }, [searchQuery, tags]);\n\n  const handleTagSelect = (tag: Tag) => {\n    if (!selectedTags.find(t => t.id === tag.id)) {\n      const newSelectedTags = [...selectedTags, tag];\n      setSelectedTags(newSelectedTags);\n      onTagSelect(tag);\n      \n      // Trigger asset filter\n      onAssetFilter(searchQuery, newSelectedTags);\n      \n      // Save to history\n      if (searchQuery.trim()) {\n        saveSearchHistory(searchQuery, newSelectedTags);\n      }\n    }\n    setShowSuggestions(false);\n  };\n\n  const handleTagRemove = (tagId: number) => {\n    const newSelectedTags = selectedTags.filter(t => t.id !== tagId);\n    setSelectedTags(newSelectedTags);\n    onAssetFilter(searchQuery, newSelectedTags);\n  };\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onAssetFilter(searchQuery, selectedTags);\n    setShowSuggestions(false);\n    \n    if (searchQuery.trim()) {\n      saveSearchHistory(searchQuery, selectedTags);\n    }\n  };\n\n  const handleClearAll = () => {\n    setSearchQuery('');\n    setSelectedTags([]);\n    onAssetFilter('', []);\n  };\n\n  const handleRecentSearchSelect = (search: SearchHistory) => {\n    setSearchQuery(search.query);\n    setSelectedTags(search.tags);\n    onAssetFilter(search.query, search.tags);\n    setShowSuggestions(false);\n  };\n\n  return (\n    <div className={cn('space-y-3', className)}>\n      <form onSubmit={handleSearchSubmit} className=\"relative\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder={placeholder}\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            onFocus={() => setShowSuggestions(true)}\n            className=\"pl-10 pr-20\"\n          />\n          <div className=\"absolute right-1 top-1/2 -translate-y-1/2 flex gap-1\">\n            {(searchQuery || selectedTags.length > 0) && (\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleClearAll}\n                className=\"h-8 px-2 text-gray-500 hover:text-gray-700\"\n              >\n                <X className=\"h-3 w-3\" />\n              </Button>\n            )}\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowSuggestions(!showSuggestions)}\n              className=\"h-8 px-2\"\n            >\n              <Filter className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Search Suggestions Dropdown */}\n        {showSuggestions && (\n          <Card className=\"absolute top-full left-0 right-0 z-50 mt-1 border shadow-lg\">\n            <CardContent className=\"p-2 max-h-80 overflow-y-auto\">\n              {/* Recent Searches */}\n              {recentSearches.length > 0 && !searchQuery && (\n                <div className=\"mb-3\">\n                  <h4 className=\"text-xs font-medium text-gray-500 mb-2 px-2 flex items-center gap-1\">\n                    <Clock className=\"h-3 w-3\" />\n                    Recent Searches\n                  </h4>\n                  <div className=\"space-y-1\">\n                    {recentSearches.slice(0, 3).map((search, index) => (\n                      <button\n                        key={index}\n                        onClick={() => handleRecentSearchSelect(search)}\n                        className=\"w-full text-left p-2 hover:bg-gray-50 rounded text-sm\"\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"font-medium\">{search.query || 'Tag search'}</span>\n                          <span className=\"text-xs text-gray-500\">\n                            {new Date(search.timestamp).toLocaleDateString()}\n                          </span>\n                        </div>\n                        {search.tags.length > 0 && (\n                          <div className=\"flex gap-1 mt-1\">\n                            {search.tags.slice(0, 3).map(tag => (\n                              <Badge key={tag.id} variant=\"outline\" className=\"text-xs\">\n                                {tag.name}\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Popular Tags */}\n              {popularTags.length > 0 && !searchQuery && (\n                <div className=\"mb-3\">\n                  <h4 className=\"text-xs font-medium text-gray-500 mb-2 px-2 flex items-center gap-1\">\n                    <TrendingUp className=\"h-3 w-3\" />\n                    Popular Tags\n                  </h4>\n                  <div className=\"grid grid-cols-2 gap-1\">\n                    {popularTags.map(tag => (\n                      <button\n                        key={tag.id}\n                        onClick={() => handleTagSelect(tag)}\n                        className=\"p-2 hover:bg-gray-50 rounded text-left text-sm flex items-center gap-2\"\n                      >\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: tag.color }}\n                        />\n                        <span>{tag.name}</span>\n                        <span className=\"text-xs text-gray-500 ml-auto\">\n                          ({tag.usageCount})\n                        </span>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Smart Suggestions */}\n              {smartSuggestions.items.length > 0 && (\n                <div className=\"mb-3\">\n                  <h4 className=\"text-xs font-medium text-gray-500 mb-2 px-2 flex items-center gap-1\">\n                    <Sparkles className=\"h-3 w-3\" />\n                    {smartSuggestions.type}\n                  </h4>\n                  <div className=\"space-y-1\">\n                    {smartSuggestions.items.slice(0, 4).map(tag => (\n                      <button\n                        key={tag.id}\n                        onClick={() => handleTagSelect(tag)}\n                        className=\"w-full p-2 hover:bg-gray-50 rounded text-left text-sm flex items-center gap-2\"\n                      >\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: tag.color }}\n                        />\n                        <span>{tag.name}</span>\n                        <Badge variant=\"outline\" className=\"text-xs ml-auto\">\n                          {tag.category}\n                        </Badge>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Search Results */}\n              {searchQuery && tags.length > 0 && (\n                <div>\n                  <h4 className=\"text-xs font-medium text-gray-500 mb-2 px-2\">\n                    Search Results ({tags.length})\n                  </h4>\n                  <div className=\"space-y-1\">\n                    {tags.slice(0, 6).map(tag => (\n                      <button\n                        key={tag.id}\n                        onClick={() => handleTagSelect(tag)}\n                        className=\"w-full p-2 hover:bg-gray-50 rounded text-left text-sm flex items-center gap-2\"\n                      >\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: tag.color }}\n                        />\n                        <span>{tag.name}</span>\n                        <Badge variant=\"outline\" className=\"text-xs ml-auto\">\n                          {tag.category}\n                        </Badge>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Loading State */}\n              {isLoading && (\n                <div className=\"text-center py-4 text-sm text-gray-500\">\n                  Searching tags...\n                </div>\n              )}\n\n              {/* Empty State */}\n              {searchQuery && !isLoading && tags.length === 0 && (\n                <div className=\"text-center py-4 text-sm text-gray-500\">\n                  No tags found for \"{searchQuery}\"\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </form>\n\n      {/* Selected Tags */}\n      {selectedTags.length > 0 && (\n        <div className=\"flex flex-wrap gap-2\">\n          {selectedTags.map(tag => (\n            <Badge\n              key={tag.id}\n              variant=\"secondary\"\n              className=\"text-sm flex items-center gap-1 pr-1\"\n              style={{\n                backgroundColor: `${tag.color}20`,\n                borderColor: tag.color,\n                color: tag.color\n              }}\n            >\n              <TagIcon className=\"h-3 w-3\" />\n              {tag.name}\n              <button\n                onClick={() => handleTagRemove(tag.id)}\n                className=\"ml-1 hover:text-red-600 transition-colors\"\n              >\n                <X className=\"h-3 w-3\" />\n              </button>\n            </Badge>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}