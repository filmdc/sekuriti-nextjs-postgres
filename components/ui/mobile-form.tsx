'use client';

import * as React from 'react';
import { cn } from '@/lib/utils';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Eye, EyeOff, ChevronDown, Check, X } from 'lucide-react';
import {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';

interface MobileFormFieldProps {\n  label: string;\n  required?: boolean;\n  error?: string;\n  hint?: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function MobileFormField({\n  label,\n  required,\n  error,\n  hint,\n  children,\n  className,\n}: MobileFormFieldProps) {\n  return (\n    <div className={cn('space-y-2', className)}>\n      <Label className={cn(\n        'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n        required && 'after:content-[\"*\"] after:ml-0.5 after:text-red-500'\n      )}>\n        {label}\n      </Label>\n      {children}\n      {hint && (\n        <p className=\"text-xs text-muted-foreground\">{hint}</p>\n      )}\n      {error && (\n        <p className=\"text-xs text-red-500 flex items-center gap-1\">\n          <X className=\"h-3 w-3\" />\n          {error}\n        </p>\n      )}\n    </div>\n  );\n}\n\ninterface MobileInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  error?: string;\n  hint?: string;\n  showPasswordToggle?: boolean;\n}\n\nexport function MobileInput({\n  label,\n  error,\n  hint,\n  showPasswordToggle,\n  type,\n  className,\n  ...props\n}: MobileInputProps) {\n  const [showPassword, setShowPassword] = React.useState(false);\n  const [focused, setFocused] = React.useState(false);\n\n  const inputType = showPasswordToggle ? (showPassword ? 'text' : 'password') : type;\n\n  return (\n    <MobileFormField label={label} error={error} hint={hint} required={props.required}>\n      <div className=\"relative\">\n        <Input\n          type={inputType}\n          className={cn(\n            'h-12 px-4 text-base transition-all touch-manipulation',\n            'focus:ring-2 focus:ring-primary/20 focus:border-primary',\n            error && 'border-red-500 focus:border-red-500 focus:ring-red-500/20',\n            focused && 'shadow-md',\n            className\n          )}\n          onFocus={(e) => {\n            setFocused(true);\n            props.onFocus?.(e);\n          }}\n          onBlur={(e) => {\n            setFocused(false);\n            props.onBlur?.(e);\n          }}\n          {...props}\n        />\n        {showPasswordToggle && (\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8\"\n            onClick={() => setShowPassword(!showPassword)}\n          >\n            {showPassword ? (\n              <EyeOff className=\"h-4 w-4\" />\n            ) : (\n              <Eye className=\"h-4 w-4\" />\n            )}\n          </Button>\n        )}\n      </div>\n    </MobileFormField>\n  );\n}\n\ninterface MobileTextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label: string;\n  error?: string;\n  hint?: string;\n}\n\nexport function MobileTextarea({\n  label,\n  error,\n  hint,\n  className,\n  ...props\n}: MobileTextareaProps) {\n  const [focused, setFocused] = React.useState(false);\n\n  return (\n    <MobileFormField label={label} error={error} hint={hint} required={props.required}>\n      <Textarea\n        className={cn(\n          'min-h-[100px] px-4 py-3 text-base resize-none touch-manipulation',\n          'focus:ring-2 focus:ring-primary/20 focus:border-primary',\n          error && 'border-red-500 focus:border-red-500 focus:ring-red-500/20',\n          focused && 'shadow-md',\n          className\n        )}\n        onFocus={(e) => {\n          setFocused(true);\n          props.onFocus?.(e);\n        }}\n        onBlur={(e) => {\n          setFocused(false);\n          props.onBlur?.(e);\n        }}\n        {...props}\n      />\n    </MobileFormField>\n  );\n}\n\ninterface MobileSelectProps {\n  label: string;\n  placeholder?: string;\n  options: Array<{ value: string; label: string }>;\n  value?: string;\n  onValueChange?: (value: string) => void;\n  error?: string;\n  hint?: string;\n  required?: boolean;\n  className?: string;\n}\n\nexport function MobileSelect({\n  label,\n  placeholder,\n  options,\n  value,\n  onValueChange,\n  error,\n  hint,\n  required,\n  className,\n}: MobileSelectProps) {\n  return (\n    <MobileFormField label={label} error={error} hint={hint} required={required}>\n      <Select value={value} onValueChange={onValueChange}>\n        <SelectTrigger\n          className={cn(\n            'h-12 text-base touch-manipulation',\n            'focus:ring-2 focus:ring-primary/20 focus:border-primary',\n            error && 'border-red-500 focus:border-red-500 focus:ring-red-500/20',\n            className\n          )}\n        >\n          <SelectValue placeholder={placeholder} />\n        </SelectTrigger>\n        <SelectContent className=\"max-h-60\">\n          {options.map((option) => (\n            <SelectItem\n              key={option.value}\n              value={option.value}\n              className=\"py-3 text-base\"\n            >\n              {option.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </MobileFormField>\n  );\n}\n\ninterface MobileCheckboxProps {\n  label: string;\n  checked?: boolean;\n  onCheckedChange?: (checked: boolean) => void;\n  error?: string;\n  hint?: string;\n  className?: string;\n}\n\nexport function MobileCheckbox({\n  label,\n  checked,\n  onCheckedChange,\n  error,\n  hint,\n  className,\n}: MobileCheckboxProps) {\n  return (\n    <div className={cn('space-y-2', className)}>\n      <label className=\"flex items-start gap-3 cursor-pointer touch-manipulation\">\n        <div className=\"relative flex-shrink-0 mt-0.5\">\n          <input\n            type=\"checkbox\"\n            checked={checked}\n            onChange={(e) => onCheckedChange?.(e.target.checked)}\n            className=\"sr-only\"\n          />\n          <div\n            className={cn(\n              'h-5 w-5 rounded border-2 transition-all duration-200',\n              'flex items-center justify-center',\n              checked\n                ? 'bg-primary border-primary text-primary-foreground'\n                : 'border-input bg-background hover:border-primary/50',\n              error && 'border-red-500'\n            )}\n          >\n            {checked && <Check className=\"h-3 w-3\" />}\n          </div>\n        </div>\n        <div className=\"space-y-1\">\n          <span className=\"text-sm font-medium leading-none\">{label}</span>\n          {hint && <p className=\"text-xs text-muted-foreground\">{hint}</p>}\n          {error && (\n            <p className=\"text-xs text-red-500 flex items-center gap-1\">\n              <X className=\"h-3 w-3\" />\n              {error}\n            </p>\n          )}\n        </div>\n      </label>\n    </div>\n  );\n}\n\ninterface MobileFormCardProps {\n  title?: string;\n  description?: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function MobileFormCard({\n  title,\n  description,\n  children,\n  className,\n}: MobileFormCardProps) {\n  return (\n    <Card className={cn('', className)}>\n      {(title || description) && (\n        <CardHeader className=\"pb-4\">\n          {title && <CardTitle className=\"text-lg\">{title}</CardTitle>}\n          {description && (\n            <p className=\"text-sm text-muted-foreground\">{description}</p>\n          )}\n        </CardHeader>\n      )}\n      <CardContent className={cn(title || description ? 'pt-0' : 'pt-6')}>\n        <div className=\"space-y-4\">{children}</div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface MobileFormActionsProps {\n  primaryLabel?: string;\n  secondaryLabel?: string;\n  onPrimaryClick?: () => void;\n  onSecondaryClick?: () => void;\n  primaryLoading?: boolean;\n  primaryDisabled?: boolean;\n  className?: string;\n}\n\nexport function MobileFormActions({\n  primaryLabel = 'Save',\n  secondaryLabel = 'Cancel',\n  onPrimaryClick,\n  onSecondaryClick,\n  primaryLoading,\n  primaryDisabled,\n  className,\n}: MobileFormActionsProps) {\n  return (\n    <div className={cn('flex flex-col-reverse sm:flex-row gap-3 sm:gap-2 pt-4', className)}>\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        onClick={onSecondaryClick}\n        className=\"w-full sm:w-auto\"\n        disabled={primaryLoading}\n      >\n        {secondaryLabel}\n      </Button>\n      <Button\n        type=\"submit\"\n        onClick={onPrimaryClick}\n        className=\"w-full sm:w-auto\"\n        disabled={primaryDisabled || primaryLoading}\n      >\n        {primaryLoading ? 'Saving...' : primaryLabel}\n      </Button>\n    </div>\n  );\n}